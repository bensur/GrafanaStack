---
# https://prometheus.io/docs/prometheus/latest/configuration/configuration/
global:
  # How frequently to scrape targets by default.
  scrape_interval: 1m
  # File to which PromQL queries are logged.
  # Reloading the configuration will reopen the file.
  query_log_file: /prometheus/query_log.log

# Rule files specifies a list of globs. Rules and alerts are read from
# all matching files.
rule_files:
  - rules/*.yaml

# A list of scrape configurations.
scrape_configs:
  # A scrape configuration containing exactly one endpoint to scrape:
  # Here it's Prometheus itself.
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: 'prometheus'
    # Override the global default and scrape targets from this job every 5 seconds.
    scrape_interval: 5s
    static_configs:
      - targets: ['host.docker.internal:9090']
  - job_name: local_docker  # https://prometheus.io/docs/prometheus/latest/configuration/configuration/#docker_sd_config
    # Address of the Docker daemon.
    host: docker.for.mac.host.internal

    # Optional proxy URL.
    # [ proxy_url: <string> ]

    # TLS configuration.
    # tls_config:
    #   [ <tls_config> ]

    # The port to scrape metrics from, when `role` is nodes, and for discovered
    # tasks and services that don't have published ports.
    port: 9393

    # The host to use if the container is in host networking mode.
    # [ host_networking_host: <string> | default = "localhost" ]

    # Optional filters to limit the discovery process to a subset of available
    # resources.
    # The available filters are listed in the upstream documentation:
    # https://docs.docker.com/engine/api/v1.40/#operation/ContainerList
    # [ filters:
    #   [ - name: <string>
    #       values: <string>, [...] ]

    # The time after which the containers are refreshed.
    # [ refresh_interval: <duration> | default = 60s ]

    # Authentication information used to authenticate to the Docker daemon.
    # Note that `basic_auth` and `authorization` options are
    # mutually exclusive.
    # password and password_file are mutually exclusive.

    # Optional HTTP basic authentication information.
    # basic_auth:
    #   [ username: <string> ]
    #   [ password: <secret> ]
    #   [ password_file: <string> ]

    # Optional `Authorization` header configuration.
    # authorization:
      # Sets the authentication type.
      # [ type: <string> | default: Bearer ]
      # Sets the credentials. It is mutually exclusive with
      # `credentials_file`.
      # [ credentials: <secret> ]
      # Sets the credentials to the credentials read from the configured file.
      # It is mutually exclusive with `credentials`.
      # [ credentials_file: <filename> ]

    # Optional OAuth 2.0 configuration.
    # Cannot be used at the same time as basic_auth or authorization.
    # oauth2:
    #   [ <oauth2> ]

    # Configure whether HTTP requests follow HTTP 3xx redirects.
    # [ follow_redirects: <boolean> | default = true ]

    # Whether to enable HTTP2.
    # [ enable_http2: <bool> | default: true ]

# Alerting specifies settings related to the Alertmanager.
# alerting:
#   alert_relabel_configs:
#     [ - <relabel_config> ... ]
#   alertmanagers:
#     [ - <alertmanager_config> ... ]

# Settings related to the remote write feature.
# remote_write:
#   [ - <remote_write> ... ]

# Settings related to the remote read feature.
# remote_read:
#   [ - <remote_read> ... ]

# Storage related settings that are runtime reloadable.
# storage:
#   [ exemplars: <exemplars> ]

# Configures exporting traces.
# tracing:
#   [ <tracing_config> ]