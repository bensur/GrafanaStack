---
# https://prometheus.io/docs/prometheus/latest/configuration/configuration/
global:
  # How frequently to scrape targets by default.
  scrape_interval: 1m
  # File to which PromQL queries are logged.
  # Reloading the configuration will reopen the file.
  query_log_file: /prometheus/query_log.log

# Rule files specifies a list of globs. Rules and alerts are read from
# all matching files.
rule_files:
  - rules/*.yaml

# A list of scrape configurations.
scrape_configs:
  - job_name: local_docker  # https://prometheus.io/docs/prometheus/latest/configuration/configuration/#docker_sd_config
    # honor_labels controls how Prometheus handles conflicts between labels that are
    # already present in scraped data and labels that Prometheus would attach
    # server-side ("job" and "instance" labels, manually configured target
    # labels, and labels generated by service discovery implementations).
    #
    # If honor_labels is set to "true", label conflicts are resolved by keeping label
    # values from the scraped data and ignoring the conflicting server-side labels.
    #
    # If honor_labels is set to "false", label conflicts are resolved by renaming
    # conflicting labels in the scraped data to "exported_<original-label>" (for
    # example "exported_instance", "exported_job") and then attaching server-side
    # labels.
    #
    # Setting honor_labels to "true" is useful for use cases such as federation and
    # scraping the Pushgateway, where all labels specified in the target should be
    # preserved.
    #
    # Note that any globally configured "external_labels" are unaffected by this
    # setting. In communication with external systems, they are always applied only
    # when a time series does not have a given label yet and are ignored otherwise.
    honor_labels: true
    # List of Docker service discovery configurations.
    docker_sd_configs:
    - # Address of the Docker daemon.
      host: localhost
      # TLS configuration.
      # tls_config:
      #   [ <tls_config> ]
      # The host to use if the container is in host networking mode.
      # [ host_networking_host: <string> | default = "localhost" ]

      # Optional filters to limit the discovery process to a subset of available
      # resources.
      # The available filters are listed in the upstream documentation:
      # https://docs.docker.com/engine/api/v1.40/#operation/ContainerList
      # [ filters:
      #   [ - name: <string>
      #       values: <string>, [...] ]

      # The time after which the containers are refreshed.
      # [ refresh_interval: <duration> | default = 60s ]

      # Authentication information used to authenticate to the Docker daemon.
      # Note that `basic_auth` and `authorization` options are
      # mutually exclusive.
      # password and password_file are mutually exclusive.

      # Optional HTTP basic authentication information.
      # basic_auth:
      #   [ username: <string> ]
      #   [ password: <secret> ]
      #   [ password_file: <string> ]

      # Optional `Authorization` header configuration.
      # authorization:
        # Sets the authentication type.
        # [ type: <string> | default: Bearer ]
        # Sets the credentials. It is mutually exclusive with
        # `credentials_file`.
        # [ credentials: <secret> ]
        # Sets the credentials to the credentials read from the configured file.
        # It is mutually exclusive with `credentials`.
        # [ credentials_file: <filename> ]

      # Optional OAuth 2.0 configuration.
      # Cannot be used at the same time as basic_auth or authorization.
      # oauth2:
      #   [ <oauth2> ]

      # Configure whether HTTP requests follow HTTP 3xx redirects.
      # [ follow_redirects: <boolean> | default = true ]

      # Whether to enable HTTP2.
      # [ enable_http2: <bool> | default: true ]

# The port to scrape metrics from, when `role` is nodes, and for discovered
# tasks and services that don't have published ports.
# [ port: <int> | default = 80 ]

# Alerting specifies settings related to the Alertmanager.
# alerting:
#   alert_relabel_configs:
#     [ - <relabel_config> ... ]
#   alertmanagers:
#     [ - <alertmanager_config> ... ]

# Settings related to the remote write feature.
# remote_write:
#   [ - <remote_write> ... ]

# Settings related to the remote read feature.
# remote_read:
#   [ - <remote_read> ... ]

# Storage related settings that are runtime reloadable.
# storage:
#   [ exemplars: <exemplars> ]

# Configures exporting traces.
# tracing:
#   [ <tracing_config> ]